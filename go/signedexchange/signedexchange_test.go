package signedexchange_test

import (
	"bytes"
	"encoding/base64"
	"encoding/pem"
	"fmt"
	"net/http"
	"net/url"
	"strings"
	"testing"
	"time"

	"github.com/WICG/webpackage/go/signedexchange"
)

const (
	payload  = `Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.`
	pemCerts = `-----BEGIN CERTIFICATE-----
MIIF8jCCBNqgAwIBAgIQDmTF+8I2reFLFyrrQceMsDANBgkqhkiG9w0BAQsFADBw
MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3
d3cuZGlnaWNlcnQuY29tMS8wLQYDVQQDEyZEaWdpQ2VydCBTSEEyIEhpZ2ggQXNz
dXJhbmNlIFNlcnZlciBDQTAeFw0xNTExMDMwMDAwMDBaFw0xODExMjgxMjAwMDBa
MIGlMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEUMBIGA1UEBxML
TG9zIEFuZ2VsZXMxPDA6BgNVBAoTM0ludGVybmV0IENvcnBvcmF0aW9uIGZvciBB
c3NpZ25lZCBOYW1lcyBhbmQgTnVtYmVyczETMBEGA1UECxMKVGVjaG5vbG9neTEY
MBYGA1UEAxMPd3d3LmV4YW1wbGUub3JnMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8A
MIIBCgKCAQEAs0CWL2FjPiXBl61lRfvvE0KzLJmG9LWAC3bcBjgsH6NiVVo2dt6u
Xfzi5bTm7F3K7srfUBYkLO78mraM9qizrHoIeyofrV/n+pZZJauQsPjCPxMEJnRo
D8Z4KpWKX0LyDu1SputoI4nlQ/htEhtiQnuoBfNZxF7WxcxGwEsZuS1KcXIkHl5V
RJOreKFHTaXcB1qcZ/QRaBIv0yhxvK1yBTwWddT4cli6GfHcCe3xGMaSL328Fgs3
jYrvG29PueB6VJi/tbbPu6qTfwp/H1brqdjh29U52Bhb0fJkM9DWxCP/Cattcc7a
z8EXnCO+LK8vkhw/kAiJWPKx4RBvgy73nwIDAQABo4ICUDCCAkwwHwYDVR0jBBgw
FoAUUWj/kK8CB3U8zNllZGKiErhZcjswHQYDVR0OBBYEFKZPYB4fLdHn8SOgKpUW
5Oia6m5IMIGBBgNVHREEejB4gg93d3cuZXhhbXBsZS5vcmeCC2V4YW1wbGUuY29t
ggtleGFtcGxlLmVkdYILZXhhbXBsZS5uZXSCC2V4YW1wbGUub3Jngg93d3cuZXhh
bXBsZS5jb22CD3d3dy5leGFtcGxlLmVkdYIPd3d3LmV4YW1wbGUubmV0MA4GA1Ud
DwEB/wQEAwIFoDAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIwdQYDVR0f
BG4wbDA0oDKgMIYuaHR0cDovL2NybDMuZGlnaWNlcnQuY29tL3NoYTItaGEtc2Vy
dmVyLWc0LmNybDA0oDKgMIYuaHR0cDovL2NybDQuZGlnaWNlcnQuY29tL3NoYTIt
aGEtc2VydmVyLWc0LmNybDBMBgNVHSAERTBDMDcGCWCGSAGG/WwBATAqMCgGCCsG
AQUFBwIBFhxodHRwczovL3d3dy5kaWdpY2VydC5jb20vQ1BTMAgGBmeBDAECAjCB
gwYIKwYBBQUHAQEEdzB1MCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC5kaWdpY2Vy
dC5jb20wTQYIKwYBBQUHMAKGQWh0dHA6Ly9jYWNlcnRzLmRpZ2ljZXJ0LmNvbS9E
aWdpQ2VydFNIQTJIaWdoQXNzdXJhbmNlU2VydmVyQ0EuY3J0MAwGA1UdEwEB/wQC
MAAwDQYJKoZIhvcNAQELBQADggEBAISomhGn2L0LJn5SJHuyVZ3qMIlRCIdvqe0Q
6ls+C8ctRwRO3UU3x8q8OH+2ahxlQmpzdC5al4XQzJLiLjiJ2Q1p+hub8MFiMmVP
PZjb2tZm2ipWVuMRM+zgpRVM6nVJ9F3vFfUSHOb4/JsEIUvPY+d8/Krc+kPQwLvy
ieqRbcuFjmqfyPmUv1U9QoI4TQikpw7TZU0zYZANP4C/gj4Ry48/znmUaRvy2kvI
l7gRQ21qJTK5suoiYoYNo3J9T+pXPGU7Lydz/HwW+w0DpArtAaukI8aNX4ohFUKS
wDSiIIWIWJiJGbEeIO0TIFwEVWTOnbNl/faPXpk5IRXicapqiII=
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
MIIEsTCCA5mgAwIBAgIQBOHnpNxc8vNtwCtCuF0VnzANBgkqhkiG9w0BAQsFADBs
MQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYDVQQLExB3
d3cuZGlnaWNlcnQuY29tMSswKQYDVQQDEyJEaWdpQ2VydCBIaWdoIEFzc3VyYW5j
ZSBFViBSb290IENBMB4XDTEzMTAyMjEyMDAwMFoXDTI4MTAyMjEyMDAwMFowcDEL
MAkGA1UEBhMCVVMxFTATBgNVBAoTDERpZ2lDZXJ0IEluYzEZMBcGA1UECxMQd3d3
LmRpZ2ljZXJ0LmNvbTEvMC0GA1UEAxMmRGlnaUNlcnQgU0hBMiBIaWdoIEFzc3Vy
YW5jZSBTZXJ2ZXIgQ0EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQC2
4C/CJAbIbQRf1+8KZAayfSImZRauQkCbztyfn3YHPsMwVYcZuU+UDlqUH1VWtMIC
Kq/QmO4LQNfE0DtyyBSe75CxEamu0si4QzrZCwvV1ZX1QK/IHe1NnF9Xt4ZQaJn1
itrSxwUfqJfJ3KSxgoQtxq2lnMcZgqaFD15EWCo3j/018QsIJzJa9buLnqS9UdAn
4t07QjOjBSjEuyjMmqwrIw14xnvmXnG3Sj4I+4G3FhahnSMSTeXXkgisdaScus0X
sh5ENWV/UyU50RwKmmMbGZJ0aAo3wsJSSMs5WqK24V3B3aAguCGikyZvFEohQcft
bZvySC/zA/WiaJJTL17jAgMBAAGjggFJMIIBRTASBgNVHRMBAf8ECDAGAQH/AgEA
MA4GA1UdDwEB/wQEAwIBhjAdBgNVHSUEFjAUBggrBgEFBQcDAQYIKwYBBQUHAwIw
NAYIKwYBBQUHAQEEKDAmMCQGCCsGAQUFBzABhhhodHRwOi8vb2NzcC5kaWdpY2Vy
dC5jb20wSwYDVR0fBEQwQjBAoD6gPIY6aHR0cDovL2NybDQuZGlnaWNlcnQuY29t
L0RpZ2lDZXJ0SGlnaEFzc3VyYW5jZUVWUm9vdENBLmNybDA9BgNVHSAENjA0MDIG
BFUdIAAwKjAoBggrBgEFBQcCARYcaHR0cHM6Ly93d3cuZGlnaWNlcnQuY29tL0NQ
UzAdBgNVHQ4EFgQUUWj/kK8CB3U8zNllZGKiErhZcjswHwYDVR0jBBgwFoAUsT7D
aQP4v0cB1JgmGggC72NkK8MwDQYJKoZIhvcNAQELBQADggEBABiKlYkD5m3fXPwd
aOpKj4PWUS+Na0QWnqxj9dJubISZi6qBcYRb7TROsLd5kinMLYBq8I4g4Xmk/gNH
E+r1hspZcX30BJZr01lYPf7TMSVcGDiEo+afgv2MW5gxTs14nhr9hctJqvIni5ly
/D6q1UEL2tU2ob8cbkdJf17ZSHwD2f2LSaCYJkJA69aSEaRkCldUxPUd1gJea6zu
xICaEnL6VpPX/78whQYwvwt/Tv9XBZ0k7YXDK/umdaisLRbvfXknsuvCnQsH6qqF
0wGjIChBWUMo0oHjqvbsezt3tkBigAVBRQHvFwY+3sAzm2fTYS5yh+Rp/BIAV0Ae
cPUeybQ=
-----END CERTIFICATE-----
`
	// Generated by `openssl genrsa -out privatekey.pem 2048`
	pemPrivateKey = `-----BEGIN RSA PRIVATE KEY-----
MIIEoAIBAAKCAQEAoMRYVlgUxlVOvejxDblbIZAg4ZtTbAmI7/YzNqmlKBB7UGik
7t6MCTJRM1PAQoDdRC0H5XI0TS04Lizwet8gEeBMtyHqLcWmOUGYNsYO7nNgT7N2
wbEs6v6KHHPHPMKzmxMPayOWrfE7mRvHvwTtIbE5ar5PNjpypjNH24TddkAmIXbM
YbkS2F43rVgpzOihjbeTQ/A6pxqcplifmoGSI6W26dg5N9yGnmo1ZcLdpHixR9Lr
e3xvunkDxT+B0OlwBRQtTQvZ1YoDWylpq3cOiFqU0Wn9+AG8JpL2yI49KQMVKyBV
7dLtr43LFhtBefkyqSNTxqPZyUAJJ2SNkJgwIQIDAQABAoIBAFJz4QqHqj/+SKBF
9DuhsQeJsBOFYkeqrDzF/IYwg7AEo/odcVnBcfjVgafdcGGrTdBFeCNJa2GZq5Kj
IcMi5IPGkhHqpvxKvnHnHnYZJldNfTvjQykcAXmUiqkFCE41XYBPSj0cx472hiaE
hPGHSUdaaaRBbsbVOy/aZSRFBIA8ngxyrW6B94Q/uLVZBn6axqoj8xT1YFVBgH5G
/lVxfkpjUD2im9r3w+7ofSmMKa6CyJ/bBdRf8p0ACyzDbkfyXjwUxSj/ZFrpLg66
amEXgauqxKEAhF8MP8oKir9aEwl7EaYFIRFpzQ6LT6edD5vcieov6hDi1f8xxdty
5lL4HkECgYEA01+pVvn2VqANu9tgpcX3srY6QKnqViBSXr6GX+XpcCJlxR2S4FVD
gdEwMHJK9137krvzIek57BFQXd4bTpeUW3Da8rX73tUnqKrQ5pmEqpghRyCqo0kT
V1ObepNUcQVmK6VnqIuckHNV7sjYnSCgY4P4WiPBRJCG3jTI2LUpo/UCgYEAwrV9
MtwsV9HlVHNrd8hqqaXnDvY1InFCfFxyR0m5KMTiwvcswBbwpTYtKZXWnz2HRVbO
aMmh2RQKk9Swpwb/q2TjVnPPUqH14++OwyR0k/0L4KBZMY736GqyWnfod6G5KQD2
f5MtwRFCYoJ6Tts4KtMzxxaV4TeRQA0EES7rK/0CgYBVztbi7TSYs/7/TS6t/XDx
xtJdH912u0ZVGglY8u/SStR/seLHWTW/hJmIgU13oFqZld083f5anCjBAoKZZCWg
/W6U61XlfyjLaxTFGHtn+bxAsL007lyArftHRnoYK7XvcAVlwc98QKYY+sYc+3rB
C3kNtsglunpVyJ3kg5705QJ/cVMwi2maZYLE92I2KoF7k0H8ObkTM/i3uaoU2WkP
W6s8UD2MzkCLz5y4rHuJbyVglfrwKA0zJiWEAobISm7IX/lYV/kPsgiSFRhY/zs4
numpABRT1YRgxeVT6VPg+cAnBLaKwbXn63cgLDXE+iCdkE9c04NRuMOexqjMtTOZ
rQKBgDSCTKwnbJUqN94WdBYjinFN/bR6E0wW640jkB/3e8Y4a+W4OVHWlxoEu4Tm
s5B6gZsV/ojttR+aaeRknfrhQwEIA/k2r2oZE9yp8djzyiiqGswgw8yO0WSJztbx
GRqzPwjon7ESIVpKLrVuh5qlMhUkOFUeF9wvViWX4qnV5Fvg
-----END RSA PRIVATE KEY-----
`
	base64Result = `h2RodHhnZ3JlcXVlc3SiRDp1cmxUaHR0cHM6Ly9leGFtcGxlLmNvbS9HOm1ldGhvZENHRVRocmVzcG9uc2WmQm1pWDVtaS1zaGEyNTY9RFJ5QkdQYjdDQVcydWt6YjlzVDFTMWlhbHNzdGhpdjZRVzdLcy1Ucmc0WUc6c3RhdHVzQzIwMElzaWduYXR1cmVZAfFzaWc9Kkx3UU9DZkt3SVdNMDd4bENsMG85ZXZhMVM3STV3THdXNzF1WVN4VDA1MGpvOHVhWDNMV25kakZKTHFMOWJBSi9uaEphREp3a2IrOFRzeERkQ0I1M1RFbnpSUW1Kb2k1S1BZcHVYT2lUWnZOSXRYODZXbTVCWHA0b2hWYzB0ZlRwRURrSXVOZVp4YjZqNkFHL3M2bGRySzVxZnFFaCtkTCtqVmFlUXRramRFRUVJTE9TYURvRFNSTHhBeUZNTUtpUVZ2U1FiVXR0akVRdE1vRDF4Rk1ZOGltTGdxaUFYWEY5WXpXTm5UQ1ZRaFV4M0RvaUFSQzFlb0dwaVRCTm9ESStXakFKNkFBL2pranlEVTNHNUZ3VVpibi93dFJ5ZlphM0lIK2RkMUhUL3dYK2lBWGs1cDNoekpTM2xQM3RVYk9lTFl2RUViQVd0eUdLMW5vOHVPNG1TQTsgaW50ZWdyaXR5PSJtaSI7IGNlcnRVcmw9Imh0dHBzOi8vZXhhbXBsZS5jb20vY2VydC5tc2ciOyBjZXJ0U2hhMjU2PSpaQzNsVFlUREJKUVZmMVAyVjcrZmliVHFiSXNXTlIvWDdDV05WVytDRUVBOyBkYXRlPTE1MTc0MTg4MDA7IGV4cGlyZXM9MTUxNzQyMjQwMExjb250ZW50LXR5cGVYGHRleHQvaHRtbDsgY2hhcnNldD11dGYtOE5zaWduZWQtaGVhZGVyc1goImNvbnRlbnQtdHlwZSIsICJjb250ZW50LWVuY29kaW5nIiwgIm1pIlBjb250ZW50LWVuY29kaW5nSW1pLXNoYTI1NmdwYXlsb2FkWQUlAAAAAAAAABBMb3JlbSBpcHN1bSBkb2xvARRgcWe/6pnOYgiLpwLsjjy2kmuaCoGPegEnnxIAdttyIHNpdCBhbWV0LCBjb25z6XMbMxu98ub0le9l+yp1yMSnBv6qxm7dHxwCAr++jNVlY3RldHVyIGFkaXBpc2NpatSGWmL5BkJxeRdOe6xrs3HiOxvuWE5LPSvjPF1DGhFuZyBlbGl0LCBzZWQgZG8gFhTfkutCMgs3u7iT4ZqgJgvilJj5sTQImb5u9akIjgxlaXVzbW9kIHRlbXBvciBpNcYDLNGD4nFBEHBntu8ps40vXIg48Pdw4PScKnp6XENuY2lkaWR1bnQgdXQgbGFiKObYF4oa2AOrKktMQg/tRAs5srU6xkxv9wdQk4rPM3RvcmUgZXQgZG9sb3JlIG1h8W2YJGdbJ/MrLsRaUOvG4AORaXKKaJL9bEH8dGSO1eNnbmEgYWxpcXVhLiBVdCBlwAkuF9ui+X7nwkKj6CMj7avupF3cniia+ZXLeuXqbZBuaW0gYWQgbWluaW0gdmVuiDAqtLVebQJ6ks77RQLOf4OMiSP02eD6F6emL+dH/b1pYW0sIHF1aXMgbm9zdHJ1D97k8W62uNdJujthPUw2isU3Q9EwdC6jdhHtsmagIC5kIGV4ZXJjaXRhdGlvbiB1M3mrwrSXWpu+3zBxjQ2G1S3ENet3lkIRnX/5/Jm8KB9sbGFtY28gbGFib3JpcyBuGyBp3iM+GFEgf29AoPGL364StK+MMHp3mQpkCfI1Whhpc2kgdXQgYWxpcXVpcCBlWlKfImv+zyqjd4EEkCAGPJVMComrZqw46b4YqsiRIE94IGVhIGNvbW1vZG8gY29u+SNUSiweRla8LD/BfPE+OHbmUacgTyYMnS8Opd2UkmFzZXF1YXQuIER1aXMgYXV0KJVQsafhdQHHn6HfNTyDzfKZIrvWGN5D0UZYtXru7IVlIGlydXJlIGRvbG9yIGlu3Pr76f7aegxzdMcT8cU5DyzCxxaUhzo3SrnoSCO4xbEgcmVwcmVoZW5kZXJpdCBpCAkRRJGWlPZTiwjGR1YpbeZI/K6owkABD2FXXRY4FXtuIHZvbHVwdGF0ZSB2ZWxph9st3mS3N9WcZHXRR5W/poIsjQ97BzCMPYnyAR82hx10IGVzc2UgY2lsbHVtIGRvwkjZoG8FqEF73eZrldYsPoY5FpCuFXDcIKWN5cbF66Jsb3JlIGV1IGZ1Z2lhdCBuvef/22soL81Xku941wYxNrLj2uKb2JmlY4HKNodRKol1bGxhIHBhcmlhdHVyLiBFKok5O2xFTsWsWW9978k2R7DVrFAh61hKFWpZmHFxJwB4Y2VwdGV1ciBzaW50IG9juhzMJZhT+XGDAdSoO83G9diaqpypoBwrkwR4fqNmA2tjYWVjYXQgY3VwaWRhdGF0/hVqdymDcNxXYmssHQuyfy7KsQpd27KLFVCHH/P9hNQgbm9uIHByb2lkZW50LCBz/YKIYIKZ4Ggoq44cIm26m4LIkmglddv8fV9YwdifmKB1bnQgaW4gY3VscGEgcXVpETTQC2QJ8NwcVTXoWG5wO1w1GwXoz9SWlyIwrH0E1Wwgb2ZmaWNpYSBkZXNlcnVu9kQ4vzPWk3nAaneu6I0jJNM41ZLpAzmxKQOh1DAmcUp0IG1vbGxpdCBhbmltIGlkQuc2PeGaspE6IkStO3Wpr8JmLA7rF2Ffud7yza3YBkcgZXN0IGxhYm9ydW0u
`
)

func TestSignedExchange(t *testing.T) {
	u, _ := url.Parse("https://example.com/")
	header := http.Header{}
	header.Add("Content-Type", "text/html; charset=utf-8")
	i, err := signedexchange.NewInput(u, 200, header, []byte(payload), 16)
	if err != nil {
		t.Fatal(err)
	}
	i.AddSignedHeadersHeader("Content-Type", "Content-Encoding", "MI")

	now := time.Date(2018, 1, 31, 17, 13, 20, 0, time.UTC)
	fmt.Println(now)
	certs, err := signedexchange.ParseCertificates([]byte(pemCerts))
	if err != nil {
		t.Fatal(err)
	}

	derPrivateKey, _ := pem.Decode([]byte(pemPrivateKey))
	privKey, err := signedexchange.ParsePrivateKey(derPrivateKey.Bytes)
	if err != nil {
		t.Fatal(err)
	}
	certUrl, _ := url.Parse("https://example.com/cert.msg")
	s := &signedexchange.Signer{
		Date:    now,
		Expires: now.Add(1 * time.Hour),
		Certs:   certs,
		CertUrl: certUrl,
		PrivKey: privKey,
	}
	if err := i.AddSignatureHeader(s); err != nil {
		t.Fatal(err)
	}

	var buf bytes.Buffer
	signedexchange.WriteExchangeFile(&buf, i)
	got := strings.TrimSpace(base64.StdEncoding.EncodeToString(buf.Bytes()))
	want := strings.TrimSpace(base64Result)
	if len(got) != len(want) {
		t.Errorf("len(got) vs len(want): got: %v, want: %v", len(got), len(want))
	}
	// As the data includes random values, the result will not be same.
	if got[800:] != want[800:] {
		t.Errorf("WriteExchangeFile:\ngot %v\nwant %v", got, want)
	}
}
